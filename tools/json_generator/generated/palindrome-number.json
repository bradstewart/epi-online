{"code": {"cpp": {"filename": "palindrome-numberTest.cc", "harness": "#include <limits>\n#include \"test_toolkit/test-options.h\"\n#include <cassert>\n#include <cmath>\n#include <iostream>\n#include <random>\n#include <string>\n#include <vector>\n#include \"test_toolkit/main_def.h\"\nusing std::cout;\nusing std::default_random_engine;\nusing std::endl;\nusing std::random_device;\nusing std::stoi;\nusing std::to_string;\nusing std::uniform_int_distribution;\nusing std::vector;\n//INSERT_ME\nusing std::numeric_limits;\nvoid UnitTest(TestSentry::Ptr& sentry, const char *description, int x, bool expected) {\n  TestStream::Ptr stream = sentry->GetTestStream(TestType::NORMAL, description);\n  stream->RegisterInput(x);\n  stream->RegisterExpectedOutput(expected);\n  try {\n    bool result = IsPalindromeNumber(x);\n    stream->RegisterUserOutput(result, result == expected);\n  }\n  catch (...) {\n    stream->RegisterUnhandledException();\n  }\n}\nvoid DirectedTests(const TestOptions& options) {\n  TestSentry::Ptr sentry = options.GetTestSentry(3, \"Palindrome numbers\");\n  UnitTest(sentry, \"Negative value test #1\", -1, false);\n  UnitTest(sentry, \"Negative value test #2\", -1001, false);\n  UnitTest(sentry, \"Negative value test #3\", numeric_limits<int>::min() + 1, false);\n  UnitTest(sentry, \"Negative value test #4\", numeric_limits<int>::min(), false);\n  UnitTest(sentry, \"Zero value test\", 0, true);\n  UnitTest(sentry, \"Single number test #1\", 1, true);\n  UnitTest(sentry, \"Single number test #2\", 9, true);\n  UnitTest(sentry, \"Odd-length palindrome test\", 52125, true);\n  UnitTest(sentry, \"Even-length palindrome test\", 521125, true);\n  UnitTest(sentry, \"Odd-length non-palindrome test\", 52105, false);\n  UnitTest(sentry, \"Even-length non-palindrome test\", 520125, false);\n  UnitTest(sentry, \"Big number test #1\", numeric_limits<int>::max() - 1, false);\n  UnitTest(sentry, \"Big number test #2\", numeric_limits<int>::max(), false);\n}\nint main(int argc, char **argv) {\n  DirectedTests(TestOptions(&cout));\n  return 0;\n}\n", "skeleton": "bool IsPalindromeNumber(int x) {\n    // Your solution here...\n}\n"}, "java": {"filename": "PalindromeNumberTest.java", "harness": "public class PalindromeNumberTest {\n//INSERT_ME\n  private static void unitTest(AbstractTestOptions options, String description,\n                               int input, boolean expected) {\n    AbstractTestStream stream = options.getStream();\n    stream.startTest(TestType.NORMAL, description);\n    stream.registerInput(input);\n    stream.registerExpectedOutput(expected);\n    try {\n      boolean result = isPalindromeNumber(input);\n      stream.registerUserOutput(result, result == expected);\n    }\n    catch (NullPointerException e) {\n      stream.registerNullPointerException();\n    }\n    catch (Exception e) {\n      stream.registerUnhandledException();\n    }\n    stream.endTest();\n  }\n  public static void directedTests(AbstractTestOptions options) {\n    options.startTests(0, \"Palindrome number\");\n    unitTest(options, \"Negative value test #1\", -1, false);\n    unitTest(options, \"Negative value test #2\", -1001, false);\n    unitTest(options, \"Negative value test #3\", Integer.MIN_VALUE + 1, false);\n    unitTest(options, \"Negative value test #4\", Integer.MIN_VALUE, false);\n    unitTest(options, \"Zero value test\", 0, true);\n    unitTest(options, \"Single number test #1\", 1, true);\n    unitTest(options, \"Single number test #2\", 9, true);\n    unitTest(options, \"Odd-length palindrome test\", 52125, true);\n    unitTest(options, \"Even-length palindrome test\", 521125, true);\n    unitTest(options, \"Odd-length non-palindrome test\", 52105, false);\n    unitTest(options, \"Even-length non-palindrome test\", 520125, false);\n    unitTest(options, \"Big number test #1\", Integer.MAX_VALUE - 1, false);\n    unitTest(options, \"Big number test #2\", Integer.MAX_VALUE, false);\n    options.endTests();\n  }\n  public static void main(String[] args) {\n    directedTests(new JsonTestOptions(System.out));\n  }\n}\n", "imports": "import com.epi.utils.AbstractTestOptions;\nimport com.epi.utils.AbstractTestStream;\nimport com.epi.utils.JsonTestOptions;\nimport com.epi.utils.TestType;\n", "package": "package com.epi;\n", "skeleton": "  public static boolean isPalindromeNumber(int x) {\n    // Your solution here...\n  }\n"}}, "hint": "It's easy to come up with a simple expression that extracts the least significant digit. Can you find a simple expression for the most significant digit?", "problem": "A palindromic string is one which reads the same forwards and backwards, e.g., \"redivider\". <p>In this problem, you are to write a program which determines if the decimal representation of an integer is a palindromic string.", "slug": "palindrome-number", "title": "Check if a decimal integer is a palindrome"}