{"problem": "A palindromic string is one which reads the same forwards and backwards, e.g., \"redivider\". <p>In this problem, you are to write a program which determines if the decimal representation of an integer is a palindromic string.", "hint": "It's easy to come up with a simple expression that extracts the least significant digit. Can you find a simple expression for the most significant digit?", "title": "Check if a decimal integer is a palindrome", "slug": "palindrome-number", "code": {"cpp": {"filename": "palindrome-numberTest.cc", "harness": "#include <limits>\n\n#include \"test_toolkit/test-options.h\"\n// Copyright (c) 2015 Elements of Programming Interviews. All rights reserved.\n\n#include <cassert>\n#include <cmath>\n#include <iostream>\n#include <random>\n#include <string>\n#include <vector>\n\n#include \"test_toolkit/main_def.h\"\n\nusing std::cout;\nusing std::default_random_engine;\nusing std::endl;\nusing std::random_device;\nusing std::stoi;\nusing std::to_string;\nusing std::uniform_int_distribution;\nusing std::vector;\n\n//INSERT_ME\n\nusing std::numeric_limits;\n\nvoid UnitTest(TestSentry::Ptr& sentry, const char *description, int x, bool expected) {\n  TestStream::Ptr stream = sentry->GetTestStream(TestType::NORMAL, description);\n  stream->RegisterInput(x);\n  stream->RegisterExpectedOutput(expected);\n  try {\n    bool result = IsPalindromeNumber(x);\n    stream->RegisterUserOutput(result, result == expected);\n  }\n  catch (...) {\n    stream->RegisterUnhandledException();\n  }\n}\n\nvoid DirectedTests(const TestOptions& options) {\n  TestSentry::Ptr sentry = options.GetTestSentry(3, \"Palindrome numbers\");\n\n  UnitTest(sentry, \"Negative value test #1\", -1, false);\n  UnitTest(sentry, \"Negative value test #2\", -1001, false);\n  UnitTest(sentry, \"Negative value test #3\", numeric_limits<int>::min() + 1, false);\n  UnitTest(sentry, \"Negative value test #4\", numeric_limits<int>::min(), false);\n  UnitTest(sentry, \"Zero value test\", 0, true);\n  UnitTest(sentry, \"Single number test #1\", 1, true);\n  UnitTest(sentry, \"Single number test #2\", 9, true);\n  UnitTest(sentry, \"Odd-length palindrome test\", 52125, true);\n  UnitTest(sentry, \"Even-length palindrome test\", 521125, true);\n  UnitTest(sentry, \"Odd-length non-palindrome test\", 52105, false);\n  UnitTest(sentry, \"Even-length non-palindrome test\", 520125, false);\n  UnitTest(sentry, \"Big number test #1\", numeric_limits<int>::max() - 1, false);\n  UnitTest(sentry, \"Big number test #2\", numeric_limits<int>::max(), false);\n}\n\nint main(int argc, char **argv) {\n  DirectedTests(TestOptions(&cout));\n  return 0;\n}\n", "skeleton": "bool IsPalindromeNumber(int x) {\n  if (x < 0) {\n    return false;\n  }\n\n  const int num_digits = static_cast<int>(floor(log10(x))) + 1;\n  int msd_mask = static_cast<int>(pow(10, num_digits - 1));\n  for (int i = 0; i < (num_digits / 2); ++i) {\n    if (x / msd_mask != x % 10) {\n      return false;\n    }\n    x %= msd_mask;  // Remove the most significant digit of x.\n    x /= 10;  // Remove the least significant digit of x.\n    msd_mask /= 100;\n  }\n  return true;\n}\n"}}}