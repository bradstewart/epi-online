{"title": "Find the first missing positive entry", "slug": "first-missing-positive", "problem": "Let A be an array of length n. Design an algorithm to find the smallest positive integer which is not present in A. You do not need to preserve the contents of A. <p> Examples: <pre>{1, 2, 3, 4} -> 5</pre><pre>{5, -9, 3, -8, 1, 8, 0} -> 2</pre>", "code": {"cpp": {"skeleton": "int FindFirstMissingPositive(vector<int> A) {\n    // Your solution here...\n}\n", "harness": "// Copyright (c) 2016 Elements of Programming Interviews. All rights reserved.\n#include \"test_toolkit/test-options.h\"\n// Copyright (c) 2013 Elements of Programming Interviews. All rights reserved.\n\n#include <algorithm>\n#include <cassert>\n#include <iostream>\n#include <iterator>\n#include <random>\n#include <string>\n#include <vector>\n\n#include \"test_toolkit/main_def.h\"\n\nusing std::cout;\nusing std::default_random_engine;\nusing std::endl;\nusing std::max;\nusing std::ostream_iterator;\nusing std::random_device;\nusing std::stoul;\nusing std::swap;\nusing std::uniform_int_distribution;\nusing std::vector;\n\n//FIXME(KROILOV) double declaration of i\n\n// A is passed by value argument, since we change it.\n//INSERT_ME\n\nvoid UnitTest(TestSentry::Ptr& sentry, const char* description,\n              const vector<int>& input, int expected) {\n  TestStream::Ptr stream = sentry->GetTestStream(TestType::NORMAL, description);\n  stream->RegisterInput(input);\n  stream->RegisterExpectedOutput(expected);\n\n  try {\n    int result = FindFirstMissingPositive(input);\n    stream->RegisterUserOutput(result, result == expected);\n  }\n  catch (...) {\n    stream->RegisterUnhandledException();\n  }\n}\n\nvoid DirectedTests(const TestOptions& options) {\n  TestSentry::Ptr sentry = options.GetTestSentry(15, \"Find the first missing positive entry\");\n\n  UnitTest(sentry, \"Trivial test\", {}, 1);\n  UnitTest(sentry, \"Negative numbers test\", {-9, -16, -3, -1, -4}, 1);\n  UnitTest(sentry, \"Positive numbers in ascending order test\", {1, 2, 3, 4, 5}, 6);\n  UnitTest(sentry, \"Positive numbers and zero in descending order test\", {5, 4, 3, 2, 1, 0}, 6);\n  UnitTest(sentry, \"Single missing number test\", {5, -9, 3, 2, 1, 0}, 4);\n  UnitTest(sentry, \"Multiple missing numbers test\", {5, -9, 3, -8, 1, 8, 0}, 2);\n}\n\nint main(int argc, char* argv[]) {\n  DirectedTests(TestOptions(&cout));\n  return 0;\n}\n", "filename": "first-missing-positiveTest.cc"}}, "hint": "First, find an upper bound for x"}