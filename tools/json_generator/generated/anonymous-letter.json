{"title": "Is an anonymous letter constructable?", "problem": "Write a program which takes text for an anonymous letter and text for a magazine and determines if it is possible to write the anonymous letter using the magazine. The anonymous letter can be written using the magazine if for each character in the anonymous letter, the number of times it appears in the anonymous letter is no more than the number of times it appears in the magazine.", "hint": "Count the number of distinct characters appearing in the letter.", "slug": "anonymous-letter", "code": {"cpp": {"filename": "Anonymous_letterTest.cc", "harness": "// Copyright (c) 2016 Elements of Programming Interviews. All rights reserved.\n#include \"test_toolkit/test-options.h\"\n// Copyright (c) 2015 Elements of Programming Interviews. All rights reserved.\n\n#include <algorithm>\n#include <cassert>\n#include <iostream>\n#include <random>\n#include <string>\n#include <unordered_map>\n\n#include \"test_toolkit/main_def.h\"\n\nusing std::boolalpha;\nusing std::cout;\nusing std::default_random_engine;\nusing std::endl;\nusing std::random_device;\nusing std::string;\nusing std::uniform_int_distribution;\nusing std::unordered_map;\nusing std::vector;\n//INSERT_ME\nvoid UnitTest(TestSentry::Ptr& sentry, const char* description,\n              const string& letter, const string& magazine,\n              bool expected) {\n  TestStream::Ptr stream = sentry->GetTestStream(TestType::NORMAL, description);\n  stream->GetInputWriter()->\n      WritePair(\"magazine\", magazine).\n      WritePair(\"letter\", letter);\n  stream->RegisterExpectedOutput(expected);\n  try {\n    bool result = IsLetterConstructibleFromMagazine(letter, magazine);\n    stream->RegisterUserOutput(result, result == expected);\n  }\n  catch (...) {\n    stream->RegisterUnhandledException();\n  }\n}\n\nvoid DirectedTests(const TestOptions& options) {\n  TestSentry::Ptr sentry = options.GetTestSentry(0, \"Anonymous letter\");\n\n  UnitTest(sentry, \"No duplicate characters test #1\", \"123\", \"456\", false);\n  UnitTest(sentry, \"No duplicate characters test #2\", \"123\", \"123\", true);\n  UnitTest(sentry, \"Simple test #1\", \"123\", \"12222222\", false);\n  UnitTest(sentry, \"Simple test #2\", \"123\", \"1123\", true);\n  UnitTest(sentry, \"Simple test #3\", \"12323\", \"123\", false);\n  UnitTest(sentry, \"Simple test #4\", \"aa\", \"aa\", true);\n  UnitTest(sentry, \"Simple test #5\", \"aa\", \"aaa\", true);\n  UnitTest(sentry, \"Empty input test #1\", \"a\", \"\", false);\n  UnitTest(sentry, \"Empty input test #2\", \"\", \"123\", true);\n  UnitTest(sentry, \"Empty input test #3\", \"\", \"\", true);\n  UnitTest(sentry, \"Full test\", \"GATTACA\", \"A AD FS GA T ACA TTT\", true);\n\n}\n\nint main(int argc, char* argv[]) {\n  DirectedTests(TestOptions(&cout));\n  return 0;\n}\n", "skeleton": "bool IsLetterConstructibleFromMagazine(const string& letter_text,\n                                       const string& magazine_text) {\n    // Your solution here...\n}\n"}}}