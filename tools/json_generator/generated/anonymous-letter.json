{"code": {"cpp": {"filename": "Anonymous_letterTest.cc", "harness": "#include \"test_toolkit/test-options.h\"\n#include <algorithm>\n#include <cassert>\n#include <iostream>\n#include <random>\n#include <string>\n#include <unordered_map>\n#include \"test_toolkit/main_def.h\"\nusing std::boolalpha;\nusing std::cout;\nusing std::default_random_engine;\nusing std::endl;\nusing std::random_device;\nusing std::string;\nusing std::uniform_int_distribution;\nusing std::unordered_map;\nusing std::vector;\n//INSERT_ME\nvoid UnitTest(TestSentry::Ptr& sentry, const char* description,\n              const string& letter, const string& magazine,\n              bool expected) {\n  TestStream::Ptr stream = sentry->GetTestStream(TestType::NORMAL, description);\n  stream->GetInputWriter()->\n      WritePair(\"magazine\", magazine).\n      WritePair(\"letter\", letter);\n  stream->RegisterExpectedOutput(expected);\n  try {\n    bool result = IsLetterConstructibleFromMagazine(letter, magazine);\n    stream->RegisterUserOutput(result, result == expected);\n  }\n  catch (...) {\n    stream->RegisterUnhandledException();\n  }\n}\nvoid DirectedTests(const TestOptions& options) {\n  TestSentry::Ptr sentry = options.GetTestSentry(0, \"Anonymous letter\");\n  UnitTest(sentry, \"No duplicate characters test #1\", \"123\", \"456\", false);\n  UnitTest(sentry, \"No duplicate characters test #2\", \"123\", \"123\", true);\n  UnitTest(sentry, \"Simple test #1\", \"123\", \"12222222\", false);\n  UnitTest(sentry, \"Simple test #2\", \"123\", \"1123\", true);\n  UnitTest(sentry, \"Simple test #3\", \"12323\", \"123\", false);\n  UnitTest(sentry, \"Simple test #4\", \"aa\", \"aa\", true);\n  UnitTest(sentry, \"Simple test #5\", \"aa\", \"aaa\", true);\n  UnitTest(sentry, \"Empty input test #1\", \"a\", \"\", false);\n  UnitTest(sentry, \"Empty input test #2\", \"\", \"123\", true);\n  UnitTest(sentry, \"Empty input test #3\", \"\", \"\", true);\n  UnitTest(sentry, \"Full test\", \"GATTACA\", \"A AD FS GA T ACA TTT\", true);\n}\nint main(int argc, char* argv[]) {\n  DirectedTests(TestOptions(&cout));\n  return 0;\n}\n", "skeleton": "bool IsLetterConstructibleFromMagazine(const string& letter_text,\n                                       const string& magazine_text) {\n    // Your solution here...\n}\n"}, "java": {"filename": "AnonymousLetterTest.java", "harness": "public class AnonymousLetterTest {\n//INSERT_ME\n  private static void unitTest(AbstractTestOptions options, String description,\n                               String letter, String magazine, boolean expected) {\n    AbstractTestStream stream = options.getStream();\n    stream.startTest(TestType.NORMAL, description);\n    stream.getInputWriter().\n        writePair(\"magazine\", magazine).\n        writePair(\"letter\", letter).\n        close();\n    stream.registerExpectedOutput(expected);\n    try {\n      boolean result = isLetterConstructibleFromMagazine(letter, magazine);\n      stream.registerUserOutput(result, expected == result);\n    }\n    catch (NullPointerException e) {\n      stream.registerNullPointerException();\n    }\n    catch (Exception e) {\n      stream.registerUnhandledException();\n    }\n    stream.endTest();\n  }\n  public static void directedTests(AbstractTestOptions options) {\n    options.startTests(0, \"Anonymous letter\");\n    unitTest(options, \"No duplicate characters test #1\", \"123\", \"456\", false);\n    unitTest(options, \"No duplicate characters test #2\", \"123\", \"123\", true);\n    unitTest(options, \"Simple test #1\", \"123\", \"12222222\", false);\n    unitTest(options, \"Simple test #2\", \"123\", \"1123\", true);\n    unitTest(options, \"Simple test #3\", \"12323\", \"123\", false);\n    unitTest(options, \"Simple test #4\", \"aa\", \"aa\", true);\n    unitTest(options, \"Simple test #5\", \"aa\", \"aaa\", true);\n    unitTest(options, \"Empty input test #1\", \"a\", \"\", false);\n    unitTest(options, \"Empty input test #2\", \"\", \"123\", true);\n    unitTest(options, \"Empty input test #3\", \"\", \"\", true);\n    unitTest(options, \"Full test\", \"GATTACA\", \"A AD FS GA T ACA TTT\", true);\n    options.endTests();\n  }\n  public static void main(String[] args) {\n    directedTests(new JsonTestOptions(System.out));\n  }\n}\n", "imports": "import com.epi.utils.AbstractTestOptions;\nimport com.epi.utils.AbstractTestStream;\nimport com.epi.utils.JsonTestOptions;\nimport com.epi.utils.TestType;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.Random;\n", "package": "package com.epi;\n", "skeleton": "  public static boolean isLetterConstructibleFromMagazine(String letterText,\n                                                          String magazineText) {\n    // Your solution here...\n  }\n"}}, "hint": "Count the number of distinct characters appearing in the letter.", "problem": "Write a program which takes text for an anonymous letter and text for a magazine and determines if it is possible to write the anonymous letter using the magazine. The anonymous letter can be written using the magazine if for each character in the anonymous letter, the number of times it appears in the anonymous letter is no more than the number of times it appears in the magazine.", "slug": "anonymous-letter", "title": "Is an anonymous letter constructable?"}