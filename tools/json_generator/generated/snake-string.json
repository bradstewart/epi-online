{"problem": "We illustrate what it means to write a string in sinusoidal fashion by means of an example. The string \"Hello World!\" written in sinusoidal fashion is <img src=\"http://raw.githubusercontent.com/bradstewart/epi-online/master/static/posts/snake-string.png\"/> <p> Define the snakestring S to be the left-right-top-to-down sequence in which characters appear when S is written in sinusoidal fashion. For example, the snakestring string for \"Hello World!\" is \"e lHloWrdlo!\".", "slug": "snake-string", "title": "Write a string sinusoidally", "code": {"cpp": {"filename": "snake-stringTest.cc", "harness": "#include \"test_toolkit/test-options.h\"\n// Copyright (c) 2013 Elements of Programming Interviews. All rights reserved.\n\n#include <cassert>\n#include <iostream>\n#include <random>\n#include <string>\n\n#include \"test_toolkit/main_def.h\"\n\nusing std::cout;\nusing std::default_random_engine;\nusing std::endl;\nusing std::random_device;\nusing std::stoi;\nusing std::string;\nusing std::uniform_int_distribution;\n\n//INSERT_ME\n\nvoid UnitTest(TestSentry::Ptr& sentry, const char* description,\n              const string& input, const string& expected) {\n  TestStream::Ptr stream = sentry->GetTestStream(TestType::NORMAL, description);\n  stream->RegisterInput(input);\n  stream->RegisterExpectedOutput(expected);\n  try {\n    string result = SnakeString(input);\n    stream->RegisterUserOutput(result, result == expected);\n  }\n  catch (...) {\n    stream->RegisterUnhandledException();\n  }\n}\n\nvoid DirectedTests(const TestOptions& options) {\n  TestSentry::Ptr sentry = options.GetTestSentry(0, \"Snake string\");\n\n  UnitTest(sentry, \"Short string test #1\", \"A\", \"A\");\n  UnitTest(sentry, \"Short string test #2\", \"AB\", \"BA\");\n  UnitTest(sentry, \"Short string test #3\", \"TEA\", \"ETA\");\n  UnitTest(sentry, \"Short string test #4\", \"ACRE\", \"CARE\");\n  UnitTest(sentry, \"Short string test #5\", \"SNAKE\", \"NSAEK\");\n  UnitTest(sentry, \"Long string test #1\", \"OBJECTORIENTEDPROGRAMMING\", \"BTEDGMOJCOINEPORMIGERTRAN\");\n  UnitTest(sentry, \"Long string test #2\", \"ELEMENTSOFPROGRAMMINGINTERVIEWS\", \"LNFGMIRWEEETOPORMIGNEVESMSRANTI\");\n}\n\nint main(int argc, char* argv[]) {\n  DirectedTests(TestOptions(&cout));\n  return 0;\n}\n", "skeleton": "string SnakeString(const string& s) {\n  string result;\n  // Outputs the first row, i.e., s[1], s[5], s[9], ...\n  for (int i = 1; i < s.size(); i += 4) {\n    result += s[i];\n  }\n  // Outputs the second row, i.e., s[0], s[2], s[4], ...\n  for (int i = 0; i < s.size(); i += 2) {\n    result += s[i];\n  }\n  // Outputs the third row, i.e., s[3], s[7], s[11], ...\n  for (int i = 3; i < s.size(); i += 4) {\n    result += s[i];\n  }\n  return result;\n}\n"}}, "hint": "Try concrete examples, and look fror periodicity."}