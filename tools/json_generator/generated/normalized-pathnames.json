{"code": {"cpp": {"skeleton": "string ShortestEquivalentPath(const string& path) {\n    // Your solution here...\n}\n", "filename": "normalized_pathnamesTest.cc", "harness": "// Copyright (c) 2016 Elements of Programming Interviews. All rights reserved.\n#include \"test_toolkit/test-options.h\"\n// Copyright (c) 2013 Elements of Programming Interviews. All rights reserved.\n\n#include <algorithm>\n#include <cassert>\n#include <iostream>\n#include <stdexcept>\n#include <string>\n#include <sstream>\n#include <vector>\n\n#include \"test_toolkit/main_def.h\"\n\nusing std::cout;\nusing std::endl;\nusing std::exception;\nusing std::invalid_argument;\nusing std::stringstream;\nusing std::string;\nusing std::vector;\n\n//INSERT_ME\n\nvoid UnitTest(TestSentry::Ptr& sentry, const char* description,\n              const string& input, const string& expected) {\n  TestStream::Ptr stream = sentry->GetTestStream(TestType::NORMAL, description);\n  stream->RegisterInput(input);\n  stream->RegisterExpectedOutput(expected.empty() ? \"Invalid path!\" : expected);\n  try {\n    string result = ShortestEquivalentPath(input);\n    stream->RegisterUserOutput(result, !expected.empty() && result == expected);\n  }\n  catch (invalid_argument) {\n    stream->RegisterUserOutput(\"Invalid path!\", expected.empty());\n  }\n  catch (...) {\n    stream->RegisterUnhandledException();\n  }\n}\n\nvoid DirectedTests(const TestOptions& options) {\n  TestSentry::Ptr sentry = options.GetTestSentry(0, \"Normalized pathnames\");\n  UnitTest(sentry, \"Trivial test #1\", \"/\", \"/\");\n  UnitTest(sentry, \"Normalized path test #1\", \"foo/bar\", \"foo/bar\");\n  UnitTest(sentry, \"Normalized path test #2\", \"/foo/bar\", \"/foo/bar\");\n  UnitTest(sentry, \"Normalized path test #3\", \"./foo/bar\", \"foo/bar\");\n  UnitTest(sentry, \"Double-dot test #1\", \"usr/lib/../bin/gcc\", \"usr/bin/gcc\");\n  UnitTest(sentry, \"Double-dot test #2\", \"usr/bin/../lib/../bin/gcc\", \"usr/bin/gcc\");\n  UnitTest(sentry, \"Double-dot test #3\", \"usr/bin/gcc/include/../../../\", \"usr\");\n  UnitTest(sentry, \"Double-dot test #4\", \"./../\", \"..\");\n  UnitTest(sentry, \"Double-dot test #5\", \"..\", \"..\");\n  UnitTest(sentry, \"Double-dot test #6\", \"../../local\", \"../../local\");\n  UnitTest(sentry, \"Redundant symbols test #1\", \"./.././../local\", \"../../local\");\n  UnitTest(sentry, \"Redundant symbols test #2\", \"/foo/../foo/././../././\", \"/\");\n  UnitTest(sentry, \"Redundant symbols test #3\", \"scripts//./../scripts///awkscripts/././\", \"scripts/awkscripts\");\n  UnitTest(sentry, \"Invalid path test #1\", \"/..\", \"\");\n  UnitTest(sentry, \"Invalid path test #2\", \"/foo/.././../\", \"\");\n  UnitTest(sentry, \"Invalid path test #3\", \"/./.././/\", \"\");\n}\n\nint main(int argc, char* argv[]) {\n  DirectedTests(TestOptions(&cout));\n  return 0;\n}\n"}}, "hint": "Trace the cases. How should . and .. be handled? Watch for invalid paths.", "title": "Normalize pathnames", "problem": "A file or directory can be specified via a string called the pathname. This string may specify an absolute path, starting from the root, e.g., <pre>/usr/bin/gcc</pre>or a path relative to the current working directory, e.g., <pre>scripts/awkscripts</pre> <p> Write a program which takes a pathname, and returns the shortest equivalent pathname. The function throws an <b>IllegalArgumentException</b> if the taken path is invalid. Assume individual directories and files have names that use only alphanumeric characters. Subdirectory names may be combined using forward slashes (/), the current directory (.) and parent directory (..). ", "slug": "normalized-pathnames"}