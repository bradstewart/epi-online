{"title": "Count the number of ways to traverse a 2D array", "code": {"cpp": {"skeleton": "int NumberOfWays(int n, int m) {\n    // Your solution here...\n}\n", "filename": "Number_waysTest.cc", "harness": "// Copyright (c) 2016 Elements of Programming Interviews. All rights reserved.\n#include \"test_toolkit/test-options.h\"\n// Copyright (c) 2015 Elements of Programming Interviews. All rights reserved.\n\n#include <cassert>\n#include <iostream>\n#include <random>\n#include <vector>\n\n#include \"test_toolkit/main_def.h\"\n\nusing std::cout;\nusing std::default_random_engine;\nusing std::endl;\nusing std::random_device;\nusing std::swap;\nusing std::uniform_int_distribution;\nusing std::vector;\n\n//INSERT_ME\n\nint ComputeNumberOfWaysSpaceEfficient(int n, int m) {\n  if (n < m) {\n    swap(n, m);\n  }\n  vector<int> A(m, 1);\n  for (int i = 1; i < n; ++i) {\n    int prev_res = 0;\n    if (n < m) {\n      swap(n, m);\n    }\n    for (int j = 0; j < m; ++j) {\n      A[j] = A[j] + prev_res;\n      prev_res = A[j];\n    }\n  }\n  return A[m - 1];\n}\n\nvoid UnitTest(TestSentry::Ptr& sentry, const char* description,\n              int n, int m) {\n  int expected = ComputeNumberOfWaysSpaceEfficient(n, m);\n  TestStream::Ptr stream = sentry->GetTestStream(TestType::NORMAL, description);\n  stream->GetInputWriter()->WritePair(\"n\", n).WritePair(\"m\", m);\n  stream->RegisterExpectedOutput(expected);\n  try {\n    int result = NumberOfWays(n, m);\n    stream->RegisterUserOutput(result, result == expected);\n  }\n  catch (...) {\n    stream->RegisterUnhandledException();\n  }\n}\n\nvoid DirectedTests(const TestOptions& options) {\n  TestSentry::Ptr sentry = options.GetTestSentry(0, \"Number of ways\");\n\n  UnitTest(sentry, \"Trivial test\", 1, 1);\n  UnitTest(sentry, \"n == m test #1\", 5, 5);\n  UnitTest(sentry, \"n == m test #2\", 10, 10);\n  UnitTest(sentry, \"n < m test #1\", 1, 5);\n  UnitTest(sentry, \"n < m test #2\", 3, 5);\n  UnitTest(sentry, \"n > m test #1\", 6, 1);\n  UnitTest(sentry, \"n > m test #2\", 6, 3);\n}\n\nint main(int argc, char* argv[]) {\n  DirectedTests(TestOptions(&cout));\n  return 0;\n}\n"}}, "problem": "In this problem you are to count the number of ways of starting at the top-left corner of a 2D array and getting to the bottom-right corner. All moves must either go right or down. For example, we show three ways in a 5 x 5 2D array. See the figure for a better understanding. (Note, there are a total of 70 possible ways for this example.) <p> <img src=\"http://raw.githubusercontent.com/bradstewart/epi-online/master/static/posts/number-ways-1.png\"/> <p> <img src=\"http://raw.githubusercontent.com/bradstewart/epi-online/master/static/posts/number-ways-2.png\"/> <p> <img src=\"http://raw.githubusercontent.com/bradstewart/epi-online/master/static/posts/number-ways-3.png\"/> <p> <i>Paths through a 2D array. </i> <p> Write a program that takes i and j values and returns the number of ways to the bottom-right corner.", "slug": "number-ways", "hint": "If i > 0 and j > 0, you can get to (i, j) from (i - 1, j) or (j - 1, i)."}