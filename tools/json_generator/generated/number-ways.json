{"code": {"cpp": {"filename": "Number_waysTest.cc", "harness": "#include \"test_toolkit/test-options.h\"\n#include <cassert>\n#include <iostream>\n#include <random>\n#include <vector>\n#include \"test_toolkit/main_def.h\"\nusing std::cout;\nusing std::default_random_engine;\nusing std::endl;\nusing std::random_device;\nusing std::swap;\nusing std::uniform_int_distribution;\nusing std::vector;\n//INSERT_ME\nint ComputeNumberOfWaysSpaceEfficient(int n, int m) {\n  if (n < m) {\n    swap(n, m);\n  }\n  vector<int> A(m, 1);\n  for (int i = 1; i < n; ++i) {\n    int prev_res = 0;\n    if (n < m) {\n      swap(n, m);\n    }\n    for (int j = 0; j < m; ++j) {\n      A[j] = A[j] + prev_res;\n      prev_res = A[j];\n    }\n  }\n  return A[m - 1];\n}\nvoid UnitTest(TestSentry::Ptr& sentry, const char* description,\n              int n, int m) {\n  int expected = ComputeNumberOfWaysSpaceEfficient(n, m);\n  TestStream::Ptr stream = sentry->GetTestStream(TestType::NORMAL, description);\n  stream->GetInputWriter()->WritePair(\"n\", n).WritePair(\"m\", m);\n  stream->RegisterExpectedOutput(expected);\n  try {\n    int result = NumberOfWays(n, m);\n    stream->RegisterUserOutput(result, result == expected);\n  }\n  catch (...) {\n    stream->RegisterUnhandledException();\n  }\n}\nvoid DirectedTests(const TestOptions& options) {\n  TestSentry::Ptr sentry = options.GetTestSentry(0, \"Number of ways\");\n  UnitTest(sentry, \"Trivial test\", 1, 1);\n  UnitTest(sentry, \"n == m test #1\", 5, 5);\n  UnitTest(sentry, \"n == m test #2\", 10, 10);\n  UnitTest(sentry, \"n < m test #1\", 1, 5);\n  UnitTest(sentry, \"n < m test #2\", 3, 5);\n  UnitTest(sentry, \"n > m test #1\", 6, 1);\n  UnitTest(sentry, \"n > m test #2\", 6, 3);\n}\nint main(int argc, char* argv[]) {\n  DirectedTests(TestOptions(&cout));\n  return 0;\n}\n", "skeleton": "int NumberOfWays(int n, int m) {\n    // Your solution here...\n}\n"}, "java": {"filename": "NumberWaysTest.java", "harness": "public class NumberWaysTest {\n//INSERT_ME\n  private static int computeNumberOfWaysSpaceEfficient(int n, int m) {\n    if (n < m) {\n      int temp = n;\n      n = m;\n      m = temp;\n    }\n    List<Integer> A = new ArrayList<>(Collections.nCopies(m, 1));\n    for (int i = 1; i < n; ++i) {\n      int prevRes = 0;\n      for (int j = 0; j < m; ++j) {\n        A.set(j, A.get(j) + prevRes);\n        prevRes = A.get(j);\n      }\n    }\n    return A.get(m - 1);\n  }\n  private static void unitTest(AbstractTestOptions options, String description,\n                               int n, int m) {\n    int expected = computeNumberOfWaysSpaceEfficient(n, m);\n    AbstractTestStream stream = options.getStream();\n    stream.startTest(TestType.NORMAL, description);\n    stream.getInputWriter().\n        writePair(\"n\", n).\n        writePair(\"m\", m).\n        close();\n    stream.registerExpectedOutput(expected);\n    try {\n      int result = numberOfWays(n, m);\n      stream.registerUserOutput(result, expected == result);\n    } catch (NullPointerException e) {\n      stream.registerNullPointerException();\n    } catch (Exception e) {\n      stream.registerUnhandledException();\n    }\n    stream.endTest();\n  }\n  public static void directedTests(AbstractTestOptions options) {\n    options.startTests(0, \"Number of ways\");\n    unitTest(options, \"Trivial test\", 1, 1);\n    unitTest(options, \"n == m test #1\", 5, 5);\n    unitTest(options, \"n == m test #2\", 10, 10);\n    unitTest(options, \"n < m test #1\", 1, 5);\n    unitTest(options, \"n < m test #2\", 3, 5);\n    unitTest(options, \"n > m test #1\", 6, 1);\n    unitTest(options, \"n > m test #2\", 6, 3);\n    options.endTests();\n  }\n  public static void main(String[] args) {\n    directedTests(new JsonTestOptions(System.out));\n  }\n}\n", "imports": "import com.epi.utils.AbstractTestOptions;\nimport com.epi.utils.AbstractTestStream;\nimport com.epi.utils.JsonTestOptions;\nimport com.epi.utils.TestType;\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.List;\nimport java.util.Random;\n", "package": "package com.epi;\n", "skeleton": "  public static int numberOfWays(int n, int m) {\n    // Your solution here...\n  }\n"}}, "hint": "If i > 0 and j > 0, you can get to (i, j) from (i - 1, j) or (j - 1, i).", "problem": "In this problem you are to count the number of ways of starting at the top-left corner of a 2D array and getting to the bottom-right corner. All moves must either go right or down. For example, we show three ways in a 5 x 5 2D array. See the figure for a better understanding. (Note, there are a total of 70 possible ways for this example.) <p> <img src=\"http://raw.githubusercontent.com/bradstewart/epi-online/master/static/posts/number-ways-1.png\"/> <p> <img src=\"http://raw.githubusercontent.com/bradstewart/epi-online/master/static/posts/number-ways-2.png\"/> <p> <img src=\"http://raw.githubusercontent.com/bradstewart/epi-online/master/static/posts/number-ways-3.png\"/> <p> <i>Paths through a 2D array. </i> <p> Write a program that takes i and j values and returns the number of ways to the bottom-right corner.", "slug": "number-ways", "title": "Count the number of ways to traverse a 2D array"}