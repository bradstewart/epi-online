{"hint": "Solve the problem if the input array lengths differ by orders of magnitude. What if they are approximately equal?", "title": "Compute the intersection of two sorted arrays", "code": {"cpp": {"skeleton": "vector<int> IntersectTwoSortedArrays(const vector<int>& A,\n                                     const vector<int>& B) {\n  vector<int> intersection_A_B;\n  int i = 0, j = 0;\n  while (i < A.size() && j < B.size()) {\n    if (A[i] == B[j] && (i == 0 || A[i] != A[i - 1])) {\n      intersection_A_B.emplace_back(A[i]);\n      ++i, ++j;\n    } else if (A[i] < B[j]) {\n      ++i;\n    } else {  // A[i] > B[j].\n      ++j;\n    }\n  }\n  return intersection_A_B;\n}\n", "harness": "#include <iostream>\n#include <limits>\n\n#include \"test_toolkit/test-options.h\"\n// Copyright (c) 2013 Elements of Programming Interviews. All rights reserved.\n\n#ifndef SOLUTIONS_INTERSECT_SORTED_ARRAYS3_H_\n#define SOLUTIONS_INTERSECT_SORTED_ARRAYS3_H_\n\n#include <vector>\n\nusing std::vector;\n\nnamespace IntersectTwoSortedArrays3 {\n\n//INSERT_ME\n\n}  // namespace IntersectTwoSortedArrays3\n\n#endif  // SOLUTIONS_INTERSECT_SORTED_ARRAYS3_H_\nusing std::cout;\nusing std::numeric_limits;\n\nvoid UnitTest(TestSentry::Ptr& sentry, const char* description,\n              const vector<int>& a, const vector<int>& b, const vector<int> expected) {\n  TestStream::Ptr stream = sentry->GetTestStream(TestType::NORMAL, description);\n  stream->GetInputWriter()->\n      WritePair(\"a\", a).\n      WritePair(\"b\", b);\n  stream->RegisterExpectedOutput(expected);\n  try {\n    vector<int> result = IntersectTwoSortedArrays3::IntersectTwoSortedArrays(a, b);\n    stream->RegisterUserOutput(result, result == expected);\n  }\n  catch (...) {\n    stream->RegisterUnhandledException();\n  }\n}\n\nvoid DirectedTests(const TestOptions& options) {\n  TestSentry::Ptr sentry = options.GetTestSentry(0, \"Sorted arrays intersection\");\n\n  UnitTest(sentry, \"Trivial test\",\n           {1},\n           {},\n           {});\n  UnitTest(sentry, \"Equal arrays test\",\n           {1, 2, 3, 4},\n           {1, 2, 3, 4},\n           {1, 2, 3, 4});\n  UnitTest(sentry, \"Equal arrays with duplicates test\",\n           {1, 2, 2, 2, 3, 4},\n           {1, 2, 3, 3, 4, 4},\n           {1, 2, 3, 4});\n  UnitTest(sentry, \"Duplicates at the beginning test\",\n           {1, 1, 1, 1, 2, 2, 2, 3, 4},\n           {1, 1, 1, 1, 2, 3, 3, 4, 4},\n           {1, 2, 3, 4});\n  UnitTest(sentry, \"Simple test #1\",\n           {1, 2, 2, 2, 3},\n           {3, 3, 4, 4},\n           {3});\n  UnitTest(sentry, \"Simple test #2\",\n           {numeric_limits<int>::min(), 0},\n           {0, numeric_limits<int>::max()},\n           {0});\n  UnitTest(sentry, \"Non-intersecting arrays test\",\n           {1, 3, 3, 5},\n           {2, 4, 4},\n           {});\n}\n\nint main(int argc, char* argv[]) {\n  DirectedTests(TestOptions(&cout));\n  return 0;\n}\n", "filename": "Intersect_sorted_arrays3Test.cc"}}, "slug": "intersect-sorted-arrays", "problem": "Write a program which takes as input two sorted arrays, and returns a new array containing elements that are present in both of the input arrays. The input arrays may have duplicate entries, but the returned array should be free of duplicates."}