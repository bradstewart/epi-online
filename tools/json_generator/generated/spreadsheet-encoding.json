{"title": "Compute the spreadsheet column encoding", "problem": "Spreadsheets often use an alphabetical encoding of the successive columns. Specifically, columns are identified by <b>A</b>, <b>B</b>, ... , <b>Y</b>, <b>Z</b>, <b>AA</b>, <b>AB</b>, ... , <b>ZZ</b>, <b>AAA</b>, <b>AAB</b>, etc. <p>Implement a function that converts a spreadsheet column id to the corresponding integer, with <b>A</b> corresponding to 1. <p>For example, you should return 4 for <b>D</b>, 27 for <b>AA</b>, 702 for <b>ZZ</b>, etc.", "hint": "There are 26 characters in [A, Z], and each can be mapped to an integer", "slug": "spreadsheet-encoding", "code": {"cpp": {"skeleton": "int SSDecodeColID(const string& col) {\n  int result = 0;\n  for (char c : col) {\n    result = result * 26 + c - 'A' + 1;\n  }\n  return result;\n}\n", "filename": "Spreadsheet_encodingTest.cc", "harness": "#include \"test_toolkit/test-options.h\"\n// Copyright (c) 2013 Elements of Programming Interviews. All rights reserved.\n\n#include <cassert>\n#include <iostream>\n#include <random>\n#include <string>\n\n#include \"test_toolkit/main_def.h\"\n\nusing std::cout;\nusing std::default_random_engine;\nusing std::endl;\nusing std::random_device;\nusing std::string;\nusing std::uniform_int_distribution;\n\n//INSERT_ME\n\nvoid UnitTest(TestSentry::Ptr& sentry, const char* description,\n              const string& input, int expected) {\n  TestStream::Ptr stream = sentry->GetTestStream(TestType::NORMAL, description);\n  stream->RegisterInput(input);\n  stream->RegisterExpectedOutput(expected);\n  try {\n    int result = SSDecodeColID(input);\n    stream->RegisterUserOutput(result, result == expected);\n  }\n  catch (...) {\n    stream->RegisterUnhandledException();\n  }\n}\n\nvoid DirectedTests(const TestOptions& options) {\n  TestSentry::Ptr sentry = options.GetTestSentry(5, \"Spreadsheet encoding\");\n\n  UnitTest(sentry, \"First number test\", \"A\", 1);\n  UnitTest(sentry, \"Second number test\", \"B\", 2);\n  UnitTest(sentry, \"Z-AA transition test\", \"Z\", 26);\n  UnitTest(sentry, \"Z-AA transition test\", \"AA\", 27);\n  UnitTest(sentry, \"AZ-BA transition test\", \"AZ\", 52);\n  UnitTest(sentry, \"AZ-BA transition test\", \"BA\", 53);\n  UnitTest(sentry, \"Small test\", \"CPP\", 2460);\n  UnitTest(sentry, \"Huge test\", \"TESTS\", 9240783);\n}\n\nint main(int argc, char* argv[]) {\n  DirectedTests(TestOptions(&cout));\n  return 0;\n}\n"}}}