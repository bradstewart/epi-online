{"code": {"cpp": {"filename": "Spreadsheet_encodingTest.cc", "harness": "#include \"test_toolkit/test-options.h\"\n#include <cassert>\n#include <iostream>\n#include <random>\n#include <string>\n#include \"test_toolkit/main_def.h\"\nusing std::cout;\nusing std::default_random_engine;\nusing std::endl;\nusing std::random_device;\nusing std::string;\nusing std::uniform_int_distribution;\n//INSERT_ME\nvoid UnitTest(TestSentry::Ptr& sentry, const char* description,\n              const string& input, int expected) {\n  TestStream::Ptr stream = sentry->GetTestStream(TestType::NORMAL, description);\n  stream->RegisterInput(input);\n  stream->RegisterExpectedOutput(expected);\n  try {\n    int result = SSDecodeColID(input);\n    stream->RegisterUserOutput(result, result == expected);\n  }\n  catch (...) {\n    stream->RegisterUnhandledException();\n  }\n}\nvoid DirectedTests(const TestOptions& options) {\n  TestSentry::Ptr sentry = options.GetTestSentry(5, \"Spreadsheet encoding\");\n  UnitTest(sentry, \"First number test\", \"A\", 1);\n  UnitTest(sentry, \"Second number test\", \"B\", 2);\n  UnitTest(sentry, \"Z-AA transition test\", \"Z\", 26);\n  UnitTest(sentry, \"Z-AA transition test\", \"AA\", 27);\n  UnitTest(sentry, \"AZ-BA transition test\", \"AZ\", 52);\n  UnitTest(sentry, \"AZ-BA transition test\", \"BA\", 53);\n  UnitTest(sentry, \"Small test\", \"CPP\", 2460);\n  UnitTest(sentry, \"Huge test\", \"TESTS\", 9240783);\n}\nint main(int argc, char* argv[]) {\n  DirectedTests(TestOptions(&cout));\n  return 0;\n}\n", "skeleton": "int SSDecodeColID(const string& col) {\n    // Your solution here...\n}\n"}, "java": {"filename": "SpreadsheetEncodingTest.java", "harness": "public class SpreadsheetEncodingTest {\n//INSERT_ME\n  private static void unitTest(AbstractTestOptions options, String description,\n                               String input, int expected) {\n  AbstractTestStream stream = options.getStream();\n  stream.startTest(TestType.NORMAL, description);\n  stream.registerInput(input);\n  stream.registerExpectedOutput(expected);\n  try {\n    int result = ssDecodeColID(input);\n    stream.registerUserOutput(result, result == expected);\n  }\n  catch (NullPointerException e) {\n    stream.registerNullPointerException();\n  }\n  catch (Exception e) {\n    stream.registerUnhandledException();\n  }\n  stream.endTest();\n}\n  public static void directedTests(AbstractTestOptions options) {\n    options.startTests(0, \"Spreadsheet encoding\");\n    unitTest(options, \"First number test\", \"A\", 1);\n    unitTest(options, \"Second number test\", \"B\", 2);\n    unitTest(options, \"Z-AA transition test\", \"Z\", 26);\n    unitTest(options, \"Z-AA transition test\", \"AA\", 27);\n    unitTest(options, \"AZ-BA transition test\", \"AZ\", 52);\n    unitTest(options, \"AZ-BA transition test\", \"BA\", 53);\n    unitTest(options, \"Small test\", \"CPP\", 2460);\n    unitTest(options, \"Huge test\", \"TESTS\", 9240783);\n    options.endTests();\n  }\n  public static void main(String[] args) {\n    directedTests(new JsonTestOptions(System.out));\n  }\n}\n", "imports": "import com.epi.utils.AbstractTestOptions;\nimport com.epi.utils.AbstractTestStream;\nimport com.epi.utils.JsonTestOptions;\nimport com.epi.utils.TestType;\n", "package": "package com.epi;\n", "skeleton": "  public static int ssDecodeColID(final String col) {\n    // Your solution here...\n  }\n"}}, "hint": "There are 26 characters in [A, Z], and each can be mapped to an integer", "problem": "Spreadsheets often use an alphabetical encoding of the successive columns. Specifically, columns are identified by <b>A</b>, <b>B</b>, ... , <b>Y</b>, <b>Z</b>, <b>AA</b>, <b>AB</b>, ... , <b>ZZ</b>, <b>AAA</b>, <b>AAB</b>, etc. <p>Implement a function that converts a spreadsheet column id to the corresponding integer, with <b>A</b> corresponding to 1. <p>For example, you should return 4 for <b>D</b>, 27 for <b>AA</b>, 702 for <b>ZZ</b>, etc.", "slug": "spreadsheet-encoding", "title": "Compute the spreadsheet column encoding"}