{"title": "Search in a 2D sorted array", "code": {"cpp": {"filename": "Matrix_searchTest.cc", "skeleton": "bool MatrixSearch(const vector<vector<int>>& A, int x) {\n    // Your solution here...\n}\n", "harness": "// Copyright (c) 2016 Elements of Programming Interviews. All rights reserved.\n#include \"test_toolkit/test-options.h\"\n// Copyright (c) 2013 Elements of Programming Interviews. All rights reserved.\n\n#include <algorithm>\n#include <cassert>\n#include <iostream>\n#include <limits>\n#include <random>\n#include <vector>\n\n#include \"test_toolkit/main_def.h\"\n\nusing std::cout;\nusing std::default_random_engine;\nusing std::endl;\nusing std::max;\nusing std::numeric_limits;\nusing std::random_device;\nusing std::uniform_int_distribution;\nusing std::vector;\n\n//INSERT_ME\n\nvoid UnitTest(TestSentry::Ptr& sentry, const char* description,\n              const vector<vector<int>>& input, int x, bool expected) {\n  TestStream::Ptr stream = sentry->GetTestStream(TestType::NORMAL, description);\n  stream->GetInputWriter()->\n      WritePair(\"matrix\", input).\n      WritePair(\"x\", x);\n  stream->RegisterExpectedOutput(expected);\n  try {\n    bool result = MatrixSearch(input, x);\n    stream->RegisterUserOutput(result, result == expected);\n  }\n  catch (...) {\n    stream->RegisterUnhandledException();\n  }\n}\n\nvoid DirectedTests(const TestOptions& options) {\n  TestSentry::Ptr sentry = options.GetTestSentry(0, \"Matrix search\");\n\n  UnitTest(sentry, \"Trivial test #1\", {{1}}, 1, true);\n  UnitTest(sentry, \"Trivial test #1\", {{1}}, 2, false);\n  UnitTest(sentry, \"1D matrix test #1\", {{1, 3, 5, 7, 9, 9, 11}}, 11, true);\n  UnitTest(sentry, \"1D matrix test #2\", {{1, 3, 5, 7, 9, 9, 11}}, 9, true);\n  UnitTest(sentry, \"1D matrix test #3\", {{1, 3, 5, 7, 9, 9, 11}}, 1, true);\n  UnitTest(sentry, \"1D matrix test #4\", {{1, 3, 5, 7, 9, 9, 11}}, 8, false);\n  UnitTest(sentry, \"1D matrix test #5\", {{1},\n                                         {3},\n                                         {5},\n                                         {7},\n                                         {9},\n                                         {9},\n                                         {11}}, 11, true);\n  UnitTest(sentry, \"1D matrix test #6\", {{1},\n                                         {3},\n                                         {5},\n                                         {7},\n                                         {9},\n                                         {9},\n                                         {11}}, 9, true);\n  UnitTest(sentry, \"1D matrix test #7\", {{1},\n                                         {3},\n                                         {5},\n                                         {7},\n                                         {9},\n                                         {9},\n                                         {11}}, 1, true);\n  UnitTest(sentry, \"1D matrix test #8\", {{1},\n                                         {3},\n                                         {5},\n                                         {7},\n                                         {9},\n                                         {9},\n                                         {11}}, 8, false);\n  UnitTest(sentry, \"Full test #1\", {{1,    2,    3,    4,    5},\n                                    {2,    3,    4,    5,    6},\n                                    {10,   20,   30,   40,   50},\n                                    {15,   21,   30,   40,   5000},\n                                    {1100, 2000, 3000, 4000, numeric_limits<int>::max()}}, 1, true);\n  UnitTest(sentry, \"Full test #2\", {{1,    2,    3,    4,    5},\n                                    {2,    3,    4,    5,    6},\n                                    {10,   20,   30,   40,   50},\n                                    {15,   21,   30,   40,   5000},\n                                    {1100, 2000, 3000, 4000, numeric_limits<int>::max()}}, 5, true);\n  UnitTest(sentry, \"Full test #3\", {{1,    2,    3,    4,    5},\n                                    {2,    3,    4,    5,    6},\n                                    {10,   20,   30,   40,   50},\n                                    {15,   21,   30,   40,   5000},\n                                    {1100, 2000, 3000, 4000, numeric_limits<int>::max()}}, 3, true);\n  UnitTest(sentry, \"Full test #4\", {{1,    2,    3,    4,    5},\n                                    {2,    3,    4,    5,    6},\n                                    {10,   20,   30,   40,   50},\n                                    {15,   21,   30,   40,   5000},\n                                    {1100, 2000, 3000, 4000, numeric_limits<int>::max()}}, 10, true);\n  UnitTest(sentry, \"Full test #5\", {{1,    2,    3,    4,    5},\n                                    {2,    3,    4,    5,    6},\n                                    {10,   20,   30,   40,   50},\n                                    {15,   21,   30,   40,   5000},\n                                    {1100, 2000, 3000, 4000, numeric_limits<int>::max()}}, 1100, true);\n  UnitTest(sentry, \"Full test #6\", {{1,    2,    3,    4,    5},\n                                    {2,    3,    4,    5,    6},\n                                    {10,   20,   30,   40,   50},\n                                    {15,   21,   30,   40,   5000},\n                                    {1100, 2000, 3000, 4000, numeric_limits<int>::max()}}, 3000, true);\n  UnitTest(sentry, \"Full test #7\", {{1,    2,    3,    4,    5},\n                                    {2,    3,    4,    5,    6},\n                                    {10,   20,   30,   40,   50},\n                                    {15,   21,   30,   40,   5000},\n                                    {1100, 2000, 3000, 4000, numeric_limits<int>::max()}}, numeric_limits<int>::max(),\n           true);\n  UnitTest(sentry, \"Full test #8\", {{1,    2,    3,    4,    5},\n                                    {2,    3,    4,    5,    6},\n                                    {10,   20,   30,   40,   50},\n                                    {15,   21,   30,   40,   5000},\n                                    {1100, 2000, 3000, 4000, numeric_limits<int>::max()}}, 50, true);\n  UnitTest(sentry, \"Full test #9\", {{1,    2,    3,    4,    5},\n                                    {2,    3,    4,    5,    6},\n                                    {10,   20,   30,   40,   50},\n                                    {15,   21,   30,   40,   5000},\n                                    {1100, 2000, 3000, 4000, numeric_limits<int>::max()}}, 30, true);\n  UnitTest(sentry, \"Full test #10\", {{1,    2,    3,    4,    5},\n                                     {2,    3,    4,    5,    6},\n                                     {10,   20,   30,   40,   50},\n                                     {15,   21,   30,   40,   5000},\n                                     {1100, 2000, 3000, 4000, numeric_limits<int>::max()}}, 21, true);\n  UnitTest(sentry, \"Full test #11\", {{1,    2,    3,    4,    5},\n                                     {2,    3,    4,    5,    6},\n                                     {10,   20,   30,   40,   50},\n                                     {15,   21,   30,   40,   5000},\n                                     {1100, 2000, 3000, 4000, numeric_limits<int>::max()}}, 13, false);\n  UnitTest(sentry, \"Full test #12\", {{1,    2,    3,    4,    5},\n                                     {2,    3,    4,    5,    6},\n                                     {10,   20,   30,   40,   50},\n                                     {15,   21,   30,   40,   5000},\n                                     {1100, 2000, 3000, 4000, numeric_limits<int>::max()}}, 2500, false);\n  UnitTest(sentry, \"Full test #13\", {{1,    2,    3,    4,    5},\n                                     {2,    3,    4,    5,    6},\n                                     {10,   20,   30,   40,   50},\n                                     {15,   21,   30,   40,   5000},\n                                     {1100, 2000, 3000, 4000, numeric_limits<int>::max()}},\n           numeric_limits<int>::max() - 1, false);\n  UnitTest(sentry, \"Full test #14\", {{1,    2,    3,    4,    5},\n                                     {2,    3,    4,    5,    6},\n                                     {10,   20,   30,   40,   50},\n                                     {15,   21,   30,   40,   5000},\n                                     {1100, 2000, 3000, 4000, numeric_limits<int>::max()}}, numeric_limits<int>::min(),\n           false);\n}\n\nint main(int argc, char* argv[]) {\n  DirectedTests(TestOptions(&cout));\n  return 0;\n}\n"}}, "hint": "Can you eliminate a row or a column per comparison?", "problem": "Call a 2D array sorted if its rows and its columns are nondecreasing. Design an algorithm that takes a 2D sorted array and a number and checks whether that number appears in the array. Try to archive a linear complexity over m + n, where m is the height and n is the width of the matrix. <p> <img src=\"http://raw.githubusercontent.com/bradstewart/epi-online/master/static/posts/matrix-search.png\"/> <p> <i>A 2D sorted array.</i>", "slug": "matrix-search"}