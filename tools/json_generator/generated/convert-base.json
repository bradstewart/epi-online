{"title": "Base conversion", "problem": "Write a program that performs base conversion. The input is a string, an integer b1, and another integer b2. The string represents an integer in base b1. The output should be the string representing the integer in base b2. Assume 2 \u2264 b1, b2 \u2264 16. <p> Example conversions: <pre>\"FF\" (16) = \"255\" (10)</pre><pre>\"-20\" (10) = \"-202\" (3)</pre>", "hint": "What base can you easily convert to and from?", "slug": "convert-base", "code": {"cpp": {"harness": "#include \"test_toolkit/test-options.h\"\n// Copyright (c) 2013 Elements of Programming Interviews. All rights reserved.\n\n#include <algorithm>\n#include <cassert>\n#include <iostream>\n#include <random>\n#include <string>\n\n#include \"test_toolkit/main_def.h\"\n\nusing std::cout;\nusing std::default_random_engine;\nusing std::endl;\nusing std::random_device;\nusing std::string;\nusing std::uniform_int_distribution;\nstring ConstructFromBase(int, int);\n//INSERT_ME\nstring ConstructFromBase(int x, int base) {\n  return x == 0 ? \"\" : ConstructFromBase(x / base, base) +\n                           (char)(x % base >= 10 ? 'A' + x % base - 10\n                                                 : '0' + x % base);\n}\n\nvoid UnitTest(TestSentry::Ptr& sentry, const char* description,\n              const string& number, int source_base, int target_base,\n              const string& expected, bool reverse_conversion) {\n  {\n    TestStream::Ptr stream = sentry->GetTestStream(TestType::NORMAL, description);\n    stream->GetInputWriter()->\n        WritePair(\"number\", number).\n        WritePair(\"source_base\", source_base).\n        WritePair(\"target_base\", target_base);\n    stream->RegisterExpectedOutput(expected);\n    try {\n      string result = ConvertBase(number, source_base, target_base);\n      stream->RegisterUserOutput(result, result == expected);\n    }\n    catch (...) {\n      stream->RegisterUnhandledException();\n    }\n  }\n  if (reverse_conversion)\n    UnitTest(sentry, description, expected, target_base, source_base, number, false);\n}\n\nvoid DirectedTests(const TestOptions& options) {\n  TestSentry::Ptr sentry = options.GetTestSentry(0, \"Convert base\");\n\n  UnitTest(sentry, \"Trivial test #1\", \"0\", 10, 10, \"0\", false);\n  UnitTest(sentry, \"Trivial test #2\", \"10\", 10, 10, \"10\", false);\n  UnitTest(sentry, \"Trivial test #3\", \"-20\", 10, 10, \"-20\", false);\n  UnitTest(sentry, \"Trivial test #4\", \"2147483647\", 10, 10, \"2147483647\", false);\n  UnitTest(sentry, \"Trivial test #5\", \"-2147483647\", 10, 10, \"-2147483647\", false);\n  UnitTest(sentry, \"Trivial test #6\", \"10\", 2, 2, \"10\", false);\n  UnitTest(sentry, \"Trivial test #7\", \"-20\", 3, 3, \"-20\", false);\n  UnitTest(sentry, \"Binary hex test #1\", \"1000100001111010\", 2, 16, \"887A\", true);\n  UnitTest(sentry, \"Binary hex test #2\", \"111000100001111010\", 2, 16, \"3887A\", true);\n  UnitTest(sentry, \"Binary oct test #1\", \"101100001111010\", 2, 8, \"54172\", true);\n  UnitTest(sentry, \"Binary oct test #2\", \"-1101100001111010\", 2, 8, \"-154172\", true);\n  UnitTest(sentry, \"Decimal conversion test #1\", \"255\", 10, 16, \"FF\", true);\n  UnitTest(sentry, \"Decimal conversion test #2\", \"-20\", 10, 3, \"-202\", true);\n  UnitTest(sentry, \"Decimal conversion test #3\", \"2147483647\", 10, 16, \"7FFFFFFF\", true);\n  UnitTest(sentry, \"Range test\", \"71\", 10, 36, \"1Z\", true);\n}\n\nint main(int argc, char* argv[]) {\n  DirectedTests(TestOptions(&cout));\n  return 0;\n}\n", "skeleton": "string ConvertBase(const string& s, int b1, int b2) {\n  bool is_negative = s.front() == '-';\n  int x = 0;\n  for (size_t i = (is_negative == true ? 1 : 0); i < s.size(); ++i) {\n    x *= b1;\n    x += isdigit(s[i]) ? s[i] - '0' : s[i] - 'A' + 10;\n  }\n  return (is_negative ? \"-\" : \"\") + (x == 0 ? \"0\" : ConstructFromBase(x, b2));\n}\n", "filename": "Convert_baseTest.cc"}}}