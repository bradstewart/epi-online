{"code": {"cpp": {"filename": "first-missing-positiveTest.cc", "harness": "#include \"test_toolkit/test-options.h\"\n#include <algorithm>\n#include <cassert>\n#include <iostream>\n#include <iterator>\n#include <random>\n#include <string>\n#include <vector>\n#include \"test_toolkit/main_def.h\"\nusing std::cout;\nusing std::default_random_engine;\nusing std::endl;\nusing std::max;\nusing std::ostream_iterator;\nusing std::random_device;\nusing std::stoul;\nusing std::swap;\nusing std::uniform_int_distribution;\nusing std::vector;\n//INSERT_ME\nvoid UnitTest(TestSentry::Ptr& sentry, const char* description,\n              const vector<int>& input, int expected) {\n  TestStream::Ptr stream = sentry->GetTestStream(TestType::NORMAL, description);\n  stream->RegisterInput(input);\n  stream->RegisterExpectedOutput(expected);\n  try {\n    int result = FindFirstMissingPositive(input);\n    stream->RegisterUserOutput(result, result == expected);\n  }\n  catch (...) {\n    stream->RegisterUnhandledException();\n  }\n}\nvoid DirectedTests(const TestOptions& options) {\n  TestSentry::Ptr sentry = options.GetTestSentry(15, \"Find the first missing positive entry\");\n  UnitTest(sentry, \"Trivial test\", {}, 1);\n  UnitTest(sentry, \"Negative numbers test\", {-9, -16, -3, -1, -4}, 1);\n  UnitTest(sentry, \"Positive numbers in ascending order test\", {1, 2, 3, 4, 5}, 6);\n  UnitTest(sentry, \"Positive numbers and zero in descending order test\", {5, 4, 3, 2, 1, 0}, 6);\n  UnitTest(sentry, \"Single missing number test\", {5, -9, 3, 2, 1, 0}, 4);\n  UnitTest(sentry, \"Multiple missing numbers test\", {5, -9, 3, -8, 1, 8, 0}, 2);\n}\nint main(int argc, char* argv[]) {\n  DirectedTests(TestOptions(&cout));\n  return 0;\n}\n", "skeleton": "int FindFirstMissingPositive(vector<int> A) {\n    // Your solution here...\n}\n"}, "java": {"filename": "FirstMissingPositiveTest.java", "harness": "public class FirstMissingPositiveTest {\n//INSERT_ME\n  private static void unitTest(AbstractTestOptions options, String description, List<Integer> input, int expected) {\n    AbstractTestStream stream = options.getStream();\n    stream.startTest(TestType.NORMAL, description);\n    stream.registerInput(input);\n    stream.registerExpectedOutput(expected);\n    try {\n      int result = findFirstMissingPositive(input);\n      stream.registerUserOutput(result, result == expected);\n    }\n    catch (NullPointerException e) {\n      stream.registerNullPointerException();\n    }\n    catch (Exception e) {\n      stream.registerUnhandledException();\n    }\n    stream.endTest();\n  }\n  public static void directedTests(AbstractTestOptions options) {\n    options.startTests(0, \"Find the first missing positive entry\");\n    unitTest(options, \"Trivial test\", new ArrayList<Integer>(), 1);\n    unitTest(options, \"Negative numbers test\", Arrays.asList(-9, -16, -3, -1, -4), 1);\n    unitTest(options, \"Positive numbers in ascending order test\", Arrays.asList(1, 2, 3, 4, 5), 6);\n    unitTest(options, \"Positive numbers and zero in descending order test\", Arrays.asList(5, 4, 3, 2, 1, 0), 6);\n    unitTest(options, \"Single missing number test\", Arrays.asList(5, -9, 3, 2, 1, 0), 4);\n    unitTest(options, \"Multiple missing numbers test\", Arrays.asList(5, -9, 3, -8, 1, 8, 0), 2);\n    options.endTests();\n  }\n  public static void main(String[] args) {\n    directedTests(new JsonTestOptions(System.out));\n  }\n}\n", "imports": "import com.epi.utils.AbstractTestOptions;\nimport com.epi.utils.AbstractTestStream;\nimport com.epi.utils.JsonTestOptions;\nimport com.epi.utils.TestType;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.Arrays;\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.List;\nimport java.util.Random;\n", "package": "package com.epi;\n", "skeleton": "  public static int findFirstMissingPositive(List<Integer> A) {\n    // Your solution here...\n  }\n"}}, "hint": "First, find an upper bound for x", "problem": "Let A be an array of length n. Design an algorithm to find the smallest positive integer which is not present in A. You do not need to preserve the contents of A. <p> Examples: <pre>{1, 2, 3, 4} -> 5</pre><pre>{5, -9, 3, -8, 1, 8, 0} -> 2</pre>", "slug": "first-missing-positive", "title": "Find the first missing positive entry"}