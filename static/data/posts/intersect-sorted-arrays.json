{"code": {"cpp": {"filename": "Intersect_sorted_arrays3Test.cc", "harness": "#include <iostream>\n#include <limits>\n#include \"test_toolkit/test-options.h\"\n#ifndef SOLUTIONS_INTERSECT_SORTED_ARRAYS3_H_\n#define SOLUTIONS_INTERSECT_SORTED_ARRAYS3_H_\n#include <vector>\nusing std::vector;\nnamespace IntersectTwoSortedArrays3 {\n//INSERT_ME\n}  // namespace IntersectTwoSortedArrays3\n#endif  // SOLUTIONS_INTERSECT_SORTED_ARRAYS3_H_\nusing std::cout;\nusing std::numeric_limits;\nvoid UnitTest(TestSentry::Ptr& sentry, const char* description,\n              const vector<int>& a, const vector<int>& b, const vector<int> expected) {\n  TestStream::Ptr stream = sentry->GetTestStream(TestType::NORMAL, description);\n  stream->GetInputWriter()->\n      WritePair(\"a\", a).\n      WritePair(\"b\", b);\n  stream->RegisterExpectedOutput(expected);\n  try {\n    vector<int> result = IntersectTwoSortedArrays3::IntersectTwoSortedArrays(a, b);\n    stream->RegisterUserOutput(result, result == expected);\n  }\n  catch (...) {\n    stream->RegisterUnhandledException();\n  }\n}\nvoid DirectedTests(const TestOptions& options) {\n  TestSentry::Ptr sentry = options.GetTestSentry(0, \"Sorted arrays intersection\");\n  UnitTest(sentry, \"Trivial test\",\n           {1},\n           {},\n           {});\n  UnitTest(sentry, \"Equal arrays test\",\n           {1, 2, 3, 4},\n           {1, 2, 3, 4},\n           {1, 2, 3, 4});\n  UnitTest(sentry, \"Equal arrays with duplicates test\",\n           {1, 2, 2, 2, 3, 4},\n           {1, 2, 3, 3, 4, 4},\n           {1, 2, 3, 4});\n  UnitTest(sentry, \"Duplicates at the beginning test\",\n           {1, 1, 1, 1, 2, 2, 2, 3, 4},\n           {1, 1, 1, 1, 2, 3, 3, 4, 4},\n           {1, 2, 3, 4});\n  UnitTest(sentry, \"Simple test #1\",\n           {1, 2, 2, 2, 3},\n           {3, 3, 4, 4},\n           {3});\n  UnitTest(sentry, \"Simple test #2\",\n           {numeric_limits<int>::min(), 0},\n           {0, numeric_limits<int>::max()},\n           {0});\n  UnitTest(sentry, \"Non-intersecting arrays test\",\n           {1, 3, 3, 5},\n           {2, 4, 4},\n           {});\n}\nint main(int argc, char* argv[]) {\n  DirectedTests(TestOptions(&cout));\n  return 0;\n}\n", "skeleton": "vector<int> IntersectTwoSortedArrays(const vector<int>& A,\n                                     const vector<int>& B) {\n    // Your solution here...\n}\n"}, "java": {"filename": "IntersectSortedArrays3Test.java", "harness": "public class IntersectSortedArrays3Test {\n//INSERT_ME\n  private static void unitTest(AbstractTestOptions options, String description,\n                               List<Integer> a, List<Integer> b, List<Integer> expected) {\n    AbstractTestStream stream = options.getStream();\n    stream.startTest(TestType.NORMAL, description);\n    stream.getInputWriter().\n        writePair(\"a\", a).\n        writePair(\"b\", b).\n        close();\n    stream.registerExpectedOutput(expected);\n    try {\n      List<Integer> result = intersectTwoSortedArrays(a, b);\n      stream.registerUserOutput(result, expected.equals(result));\n    }\n    catch (NullPointerException e) {\n      stream.registerNullPointerException();\n    }\n    catch (Exception e) {\n      stream.registerUnhandledException();\n    }\n    stream.endTest();\n  }\n  public static void directedTests(AbstractTestOptions options) {\n    options.startTests(0, \"Sorted arrays intersection\");\n    unitTest(options, \"Trivial test\",\n        Arrays.asList(1),\n        Collections.<Integer>emptyList(),\n        Collections.<Integer>emptyList());\n    unitTest(options, \"Equal arrays test\",\n        Arrays.asList(1, 2, 3, 4),\n        Arrays.asList(1, 2, 3, 4),\n        Arrays.asList(1, 2, 3, 4));\n    unitTest(options, \"Equal arrays with duplicates test\",\n        Arrays.asList(1, 2, 2, 2, 3, 4),\n        Arrays.asList(1, 2, 3, 3, 4, 4),\n        Arrays.asList(1, 2, 3, 4));\n    unitTest(options, \"Duplicates at the beginning test\",\n        Arrays.asList(1, 1, 1, 1, 2, 2, 2, 3, 4),\n        Arrays.asList(1, 1, 1, 1, 2, 3, 3, 4, 4),\n        Arrays.asList(1, 2, 3, 4));\n    unitTest(options, \"Simple test #1\",\n        Arrays.asList(1, 2, 2, 2, 3),\n        Arrays.asList(3, 3, 4, 4),\n        Arrays.asList(3));\n    unitTest(options, \"Simple test #2\",\n        Arrays.asList(Integer.MIN_VALUE, 0),\n        Arrays.asList(0, Integer.MAX_VALUE),\n        Arrays.asList(0));\n    unitTest(options, \"Non-intersecting arrays test\",\n        Arrays.asList(1, 3, 3, 5),\n        Arrays.asList(2, 4, 4),\n        Collections.<Integer>emptyList());\n    options.endTests();\n  }\n  public static void main(String[] args) {\n    directedTests(new JsonTestOptions(System.out));\n  }\n}\n", "imports": "import com.epi.utils.AbstractTestOptions;\nimport com.epi.utils.AbstractTestStream;\nimport com.epi.utils.JsonTestOptions;\nimport com.epi.utils.TestType;\nimport java.util.Arrays;\nimport java.util.Collections;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Collections;\nimport java.util.List;\n", "package": "package com.epi;\n", "skeleton": "  public static List<Integer> intersectTwoSortedArrays(List<Integer> A,\n                                                       List<Integer> B) {\n    // Your solution here...\n  }\n"}}, "hint": "Solve the problem if the input array lengths differ by orders of magnitude. What if they are approximately equal?", "problem": "Write a program which takes as input two sorted arrays, and returns a new array containing elements that are present in both of the input arrays. The input arrays may have duplicate entries, but the returned array should be free of duplicates.", "slug": "intersect-sorted-arrays", "title": "Compute the intersection of two sorted arrays"}