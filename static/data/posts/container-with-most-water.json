{"code": {"cpp": {"filename": "container-with-most-waterTest.cc", "harness": "#include \"test_toolkit/test-options.h\"\n#include <algorithm>\n#include <cassert>\n#include <iostream>\n#include <random>\n#include <string>\n#include <vector>\n#include \"test_toolkit/main_def.h\"\nusing std::cout;\nusing std::default_random_engine;\nusing std::endl;\nusing std::max;\nusing std::min;\nusing std::random_device;\nusing std::stoul;\nusing std::uniform_int_distribution;\nusing std::vector;\n//INSERT_ME\nvoid UnitTest(TestSentry::Ptr& sentry, const char* description,\n              const vector<int>& input, int expected) {\n  TestStream::Ptr stream = sentry->GetTestStream(TestType::NORMAL, description);\n  stream->RegisterInput(input);\n  stream->RegisterExpectedOutput(expected);\n  try {\n    int result = GetMaxTrappedWater(input);\n    stream->RegisterUserOutput(result, result == expected);\n  }\n  catch (...) {\n    stream->RegisterUnhandledException();\n  }\n}\nvoid DirectedTests(const TestOptions& options) {\n  TestSentry::Ptr sentry = options.GetTestSentry(0, \"Container with most water\");\n  UnitTest(sentry, \"Simple test #1\", {1, 1}, 1);\n  UnitTest(sentry, \"Simple test #2\", {1, 1, 1, 1}, 3);\n  UnitTest(sentry, \"Simple test #3\", {10, 2, 1}, 2);\n  UnitTest(sentry, \"Simple test #4\", {1, 2, 10}, 2);\n  UnitTest(sentry, \"Simple test #5\", {10, 2, 10}, 20);\n  UnitTest(sentry, \"Full test #1\", {1, 4, 9, 16, 25, 16, 9, 3, 1}, 36);\n  UnitTest(sentry, \"Full test #2\", {1, 4, 9, 16, 25, 16, 9, 3, 1, 4, 9, 16, 25, 16, 9, 3, 1}, 200);\n  UnitTest(sentry, \"Full test #3\", {1, 4, 9, 16, 25, 16, 9, 3, 300, 1, 300, 4, 9, 16, 25, 16, 9, 3, 1}, 600);\n  UnitTest(sentry, \"Full test #4\", {1, 2, 1, 3, 4, 4, 5, 6, 2, 1, 3, 1, 3, 2, 1, 2, 4, 1}, 48);\n}\nint main(int argc, char* argv[]) {\n  DirectedTests(TestOptions(&cout));\n  return 0;\n}\n", "skeleton": "int GetMaxTrappedWater(const vector<int>& heights) {\n    // Your solution here...\n}\n"}, "java": {"filename": "ContainerWithMostWaterTest.java", "harness": "public class ContainerWithMostWaterTest {\n//INSERT_ME\n  private static void unitTest(AbstractTestOptions options, String description,\n                               List<Integer> input, int expected) {\n    AbstractTestStream stream = options.getStream();\n    stream.startTest(TestType.NORMAL, description);\n    stream.registerInput(input);\n    stream.registerExpectedOutput(expected);\n    try {\n      int result = getMaxTrappedWater(input);\n      stream.registerUserOutput(result, expected == result);\n    } catch (NullPointerException e) {\n      stream.registerNullPointerException();\n    } catch (Exception e) {\n      stream.registerUnhandledException();\n    }\n    stream.endTest();\n  }\n  public static void directedTests(AbstractTestOptions options) {\n    options.startTests(0, \"Container with most water\");\n    unitTest(options, \"Simple test #1\", Arrays.asList(1, 1), 1);\n    unitTest(options, \"Simple test #2\", Arrays.asList(1, 1, 1, 1), 3);\n    unitTest(options, \"Simple test #3\", Arrays.asList(10, 2, 1), 2);\n    unitTest(options, \"Simple test #4\", Arrays.asList(1, 2, 10), 2);\n    unitTest(options, \"Simple test #5\", Arrays.asList(10, 2, 10), 20);\n    unitTest(options, \"Full test #1\", Arrays.asList(1, 4, 9, 16, 25, 16, 9, 3, 1), 36);\n    unitTest(options, \"Full test #2\", Arrays.asList(1, 4, 9, 16, 25, 16, 9, 3, 1, 4, 9, 16, 25, 16, 9, 3, 1), 200);\n    unitTest(options, \"Full test #3\", Arrays.asList(1, 4, 9, 16, 25, 16, 9, 3, 300, 1, 300, 4, 9, 16, 25, 16, 9, 3, 1), 600);\n    unitTest(options, \"Full test #4\", Arrays.asList(1, 2, 1, 3, 4, 4, 5, 6, 2, 1, 3, 1, 3, 2, 1, 2, 4, 1), 48);\n    options.endTests();\n  }\n  public static void main(String[] args) {\n    directedTests(new JsonTestOptions(System.out));\n  }\n}\n", "imports": "import com.epi.utils.AbstractTestOptions;\nimport com.epi.utils.AbstractTestStream;\nimport com.epi.utils.JsonTestOptions;\nimport com.epi.utils.TestType;\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.Arrays;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Random;\n", "package": "package com.epi;\n", "skeleton": "  public static int getMaxTrappedWater(List<Integer> heights) {\n    // Your solution here...\n  }\n"}}, "hint": "Start with 0 and n-1 and work your way in.", "problem": "An array of integers naturally defines a set of lines parallel to the Y-axis, starting from x = 0 as illustrated in the following figure. The goal of this problem is to find the pair of lines that together with the X-axis \"trap\" the most water. <p> Write a program which takes as input an integer array and returns the pair of entries that trap the maximum amount of water. <p> <img src=\"http://raw.githubusercontent.com/bradstewart/epi-online/master/static/posts/trapped-water-1.png\"/> <p> <i>A graphical depiction of the array {1, 2, 1, 3, 4, 4, 5, 6, 2, 1, 3, 1, 3, 2, 1, 2, 4, 1}</i><p> <img src=\"http://raw.githubusercontent.com/bradstewart/epi-online/master/static/posts/trapped-water-2.png\"/> <p> <i>The shaded area between 4 and 16 is the maximum water that can be trapped by the array</i>", "slug": "container-with-most-water", "title": "Compute the maximum water trapped by a pair of vertical lines"}