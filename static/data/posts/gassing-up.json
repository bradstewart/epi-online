{
  "slug": "gassing-up",
  "title": "The gasup problem",
  "hint": "Think about starting with more than enough gas to complete the circuit without gassing up. Track the amount of gas as you perform the curcuit, gassing up at each cities.",
  "problem": "In the gasup problem, a number of cities are arranged on a circular road. You need to visit all the cities and come back to the starting city. A certain amount of gas is available at each city. The amount of gas summed up over all cities is equal to the amount of gas required to go around the road once. Your gas tank has unlimited capacity. Call a city ample if you can begin at that city with an empty tank, refill at it, then travel through all remaining cities, refilleng at each, and return to the ample city, without running out of gas at any point. See the figure for an example. <p> <img src=\"http:\/\/raw.githubusercontent.com\/bradstewart\/epi-online\/master\/static\/posts\/gassing-up.png\"\/> <p> Write a program, that takes an array of gallons available at each city and distances between cities and returns an id of an ample city.",
  "skeleton": "public static int findAmpleCity(List<Integer> gallons, List<Integer> distances) {\r\n    \/\/ Your solution here...\r\n}",
  "test": "int MILES_PER_GALLON = 10;\r\ncheck(Arrays.asList(0, 18, 13, 16, 7, 8, 4, 17), Arrays.asList(20, 280, 10, 150, 40, 180, 80, 70), 2);\r\ncheck(Arrays.asList(200, 2, 2, 2, 10, 10), Arrays.asList(1000, 400, 400, 400, 20, 20), 4);\r\ncheck(Arrays.asList(30, 90, 30, 2, 10, 10), Arrays.asList(400, 300, 200, 400, 20, 400), 1);"
}
