{"code": {"cpp": {"filename": "snake-stringTest.cc", "harness": "#include \"test_toolkit/test-options.h\"\n#include <cassert>\n#include <iostream>\n#include <random>\n#include <string>\n#include \"test_toolkit/main_def.h\"\nusing std::cout;\nusing std::default_random_engine;\nusing std::endl;\nusing std::random_device;\nusing std::stoi;\nusing std::string;\nusing std::uniform_int_distribution;\n//INSERT_ME\nvoid UnitTest(TestSentry::Ptr& sentry, const char* description,\n              const string& input, const string& expected) {\n  TestStream::Ptr stream = sentry->GetTestStream(TestType::NORMAL, description);\n  stream->RegisterInput(input);\n  stream->RegisterExpectedOutput(expected);\n  try {\n    string result = SnakeString(input);\n    stream->RegisterUserOutput(result, result == expected);\n  }\n  catch (...) {\n    stream->RegisterUnhandledException();\n  }\n}\nvoid DirectedTests(const TestOptions& options) {\n  TestSentry::Ptr sentry = options.GetTestSentry(0, \"Snake string\");\n  UnitTest(sentry, \"Short string test #1\", \"A\", \"A\");\n  UnitTest(sentry, \"Short string test #2\", \"AB\", \"BA\");\n  UnitTest(sentry, \"Short string test #3\", \"TEA\", \"ETA\");\n  UnitTest(sentry, \"Short string test #4\", \"ACRE\", \"CARE\");\n  UnitTest(sentry, \"Short string test #5\", \"SNAKE\", \"NSAEK\");\n  UnitTest(sentry, \"Long string test #1\", \"OBJECTORIENTEDPROGRAMMING\", \"BTEDGMOJCOINEPORMIGERTRAN\");\n  UnitTest(sentry, \"Long string test #2\", \"ELEMENTSOFPROGRAMMINGINTERVIEWS\", \"LNFGMIRWEEETOPORMIGNEVESMSRANTI\");\n}\nint main(int argc, char* argv[]) {\n  DirectedTests(TestOptions(&cout));\n  return 0;\n}\n", "skeleton": "string SnakeString(const string& s) {\n    // Your solution here...\n}\n"}, "java": {"filename": "SnakeStringTest.java", "harness": "public class SnakeStringTest {\n//INSERT_ME\n  private static void unitTest(AbstractTestOptions options, String description,\n                               String input, String expected) {\n    AbstractTestStream stream = options.getStream();\n    stream.startTest(TestType.NORMAL, description);\n    stream.registerInput(input);\n    stream.registerExpectedOutput(expected);\n    try {\n      String result = snakeString(input);\n      stream.registerUserOutput(result, expected.equals(result));\n    } catch (NullPointerException e) {\n      stream.registerNullPointerException();\n    } catch (Exception e) {\n      stream.registerUnhandledException();\n    }\n    stream.endTest();\n  }\n  public static void directedTests(AbstractTestOptions options) {\n    options.startTests(0, \"Snake string\");\n    unitTest(options, \"Short string test #1\", \"A\", \"A\");\n    unitTest(options, \"Short string test #2\", \"AB\", \"BA\");\n    unitTest(options, \"Short string test #3\", \"TEA\", \"ETA\");\n    unitTest(options, \"Short string test #4\", \"ACRE\", \"CARE\");\n    unitTest(options, \"Short string test #5\", \"SNAKE\", \"NSAEK\");\n    unitTest(options, \"Long string test #1\", \"OBJECTORIENTEDPROGRAMMING\", \"BTEDGMOJCOINEPORMIGERTRAN\");\n    unitTest(options, \"Long string test #2\", \"ELEMENTSOFPROGRAMMINGINTERVIEWS\", \"LNFGMIRWEEETOPORMIGNEVESMSRANTI\");\n    options.endTests();\n  }\n  public static void main(String[] args) {\n    directedTests(new JsonTestOptions(System.out));\n  }\n}\n", "imports": "import com.epi.utils.AbstractTestOptions;\nimport com.epi.utils.AbstractTestStream;\nimport com.epi.utils.JsonTestOptions;\nimport com.epi.utils.TestType;\n", "package": "package com.epi;\n", "skeleton": "  public static String snakeString(String s) {\n    // Your solution here...\n  }\n"}}, "hint": "Try concrete examples, and look fror periodicity.", "problem": "We illustrate what it means to write a string in sinusoidal fashion by means of an example. The string \"Hello World!\" written in sinusoidal fashion is <img src=\"http://raw.githubusercontent.com/bradstewart/epi-online/master/static/posts/snake-string.png\"/> <p> Define the snakestring S to be the left-right-top-to-down sequence in which characters appear when S is written in sinusoidal fashion. For example, the snakestring string for \"Hello World!\" is \"e lHloWrdlo!\".", "slug": "snake-string", "title": "Write a string sinusoidally"}