{"code": {"cpp": {"filename": "RPNTest.cc", "harness": "#include <iostream>\n#include \"test_toolkit/test-options.h\"\n#include <cassert>\n#include <sstream>\n#include <stack>\n#include <string>\n#include \"test_toolkit/main_def.h\"\nusing std::stack;\nusing std::string;\nusing std::stringstream;\n//INSERT_ME\nusing std::cout;\nvoid UnitTest(TestSentry::Ptr& sentry, const char* description,\n              const string& input, int expected) {\n  TestStream::Ptr stream = sentry->GetTestStream(TestType::NORMAL, description);\n  stream->RegisterInput(input);\n  stream->RegisterExpectedOutput(expected);\n  try {\n    int result = Eval(input);\n    stream->RegisterUserOutput(result, result == expected);\n  }\n  catch (...) {\n    stream->RegisterUnhandledException();\n  }\n}\nvoid DirectedTests(const TestOptions& options) {\n  TestSentry::Ptr sentry = options.GetTestSentry(1, \"Reverse Polish Notation\");\n  UnitTest(sentry, \"Positive number test\", \"1024\", 1024);\n  UnitTest(sentry, \"Negative number test\", \"-1024\", -1024);\n  UnitTest(sentry, \"Addition test\", \"1000,24,+\", 1024);\n  UnitTest(sentry, \"Subtraction test\", \"1024,24,-\", 1000);\n  UnitTest(sentry, \"Multiplication test\", \"32,32,*\", 1024);\n  UnitTest(sentry, \"Negative-negative multiplication test\", \"-10,-30,*\", 300);\n  UnitTest(sentry, \"Division test\", \"1024,256,/\", 4);\n  UnitTest(sentry, \"Several additions test\", \"10,20,+,30,40,50,60,+,+,+,+\", 210);\n  UnitTest(sentry, \"Small expression test\", \"7,3,*,4,2,/,-,3,5,-2,*,+,+\", 12);\n  UnitTest(sentry, \"Huge expression test\", \"25,4,*,50,/,18,24,*,50,12,-,36,64,*,72,/,-,+,+\", 440);\n}\nint main(int argc, char* argv[]) {\n  DirectedTests(TestOptions(&cout));\n  return 0;\n}\n", "skeleton": "int Eval(const string& RPN_expression) {\n    // Your solution here...\n}\n"}, "java": {"filename": "RPNTest.java", "harness": "public class RPNTest {\n//INSERT_ME\n  private static void unitTest(AbstractTestOptions options, String description,\n                               String input, int expected) {\n    AbstractTestStream stream = options.getStream();\n    stream.startTest(TestType.NORMAL, description);\n    stream.registerInput(input);\n    stream.registerExpectedOutput(expected);\n    try {\n      int result = eval(input);\n      stream.registerUserOutput(result, result == expected);\n    }\n    catch (NullPointerException e) {\n      stream.registerNullPointerException();\n    }\n    catch (Exception e) {\n      stream.registerUnhandledException();\n    }\n    stream.endTest();\n  }\n  public static void directedTests(AbstractTestOptions options) {\n    options.startTests(1, \"Reverse Polish Notation\");\n    unitTest(options, \"Positive number test\", \"1024\", 1024);\n    unitTest(options, \"Negative number test\", \"-1024\", -1024);\n    unitTest(options, \"Addition test\", \"1000,24,+\", 1024);\n    unitTest(options, \"Subtraction test\", \"1024,24,-\", 1000);\n    unitTest(options, \"Multiplication test\", \"32,32,*\", 1024);\n    unitTest(options, \"Negative-negative multiplication test\", \"-10,-30,*\", 300);\n    unitTest(options, \"Division test\", \"1024,256,/\", 4);\n    unitTest(options, \"Several additions test\", \"10,20,+,30,40,50,60,+,+,+,+\", 210);\n    unitTest(options, \"Small expression test\", \"7,3,*,4,2,/,-,3,5,-2,*,+,+\", 12);\n    unitTest(options, \"Huge expression test\", \"25,4,*,50,/,18,24,*,50,12,-,36,64,*,72,/,-,+,+\", 440);\n    options.endTests();\n  }\n  public static void main(String[] args) {\n    directedTests(new JsonTestOptions(System.out));\n  }\n}\n", "imports": "import com.epi.utils.AbstractTestOptions;\nimport com.epi.utils.AbstractTestStream;\nimport com.epi.utils.JsonTestOptions;\nimport com.epi.utils.TestType;\nimport java.util.Deque;\nimport java.util.LinkedList;\n", "package": "package com.epi;\n", "skeleton": "  public static int eval(String RPNExpression) {\n    // Your solution here...\n  }\n"}}, "hint": "Process subexpressions, keeping values in a stack. How should operators be handled", "problem": "A string is said to be an arithmetical expression in reverse Polish notation (RPN) if: <ol> <li> It is a single digit or a sequence of digits, prefixed with an optional <b>-</b> </li> <li>It is of the form \"A, B, o\" where A and B are RPN expression and o is one of <b>+</b>, <b>-</b>, <b>\u00d7</b>, <b>/</b> </li> </ol> An RPN expression can be evaluated uniquely to an integer. Here is an example of an RPN expression. <pre>7, 3, +, 4, 2, /, / = (7+3) / (4/2) = 5 </pre> <p> Write a program that takes an arithmetical expression in RPN and returns the number that the expression evaluates to.", "slug": "rpn", "title": "Evaluate RPN expression"}