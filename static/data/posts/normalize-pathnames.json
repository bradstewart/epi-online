{
  "slug": "normalize-pathnames",
  "title": "Normalize pathnames",
  "hint": "Trace the cases. How should . and .. be handled? Watch for invalid paths.",
  "problem": "A file or directory can be specified via a string called the pathname. This string may specify an absolute path, starting from the root, e.g., /usr/bin/gcc, or a path relative to the current working directory, e.g., scripts/awkscripts.\r\nWrite a program which takes a pathname, and returns the shortest equivalent pathname. The function throws an IllegalArgumentException if the taken path is invalid. Assume individual directories and files have names that use only alphanumeric characters. Subdirectory names may be combined using forward slashes (/), the current directory (.) and parent directory (..). ",
  "skeleton": "public static String shortestEquivalentPath(String path) {\r\n    \/\/ Your solution here...\r\n}",
  "test": "check(\"/\", \"/\");\r\ncheck(\"foo/bar\", \"foo/bar\");\r\ncheck(\"/foo/bar\", \"/foo/bar\");\r\ncheck(\"usr/lib/../bin/gcc\", \"usr/bin/gcc\");\r\ncheck(\"usr/bin/../lib/../bin/gcc\", \"usr/bin/gcc\");\r\ncheck(\"usr/bin/gcc/include/../../../\", \"usr\");\r\ncheck(\"./../\", \"..\");\r\ncheck(\"..\", \"..\");\r\ncheck(\"../../local\", \"../../local\");\r\ncheck(\"./.././../local\", \"../../local\");\r\ncheck(\"/foo/../foo/././../././\", \"/\");\r\ncheck(\"scripts//./../scripts///awkscripts/././\", \"scripts/awkscripts\");\r\ncheckThrows(\"/..\");\r\ncheckThrows(\"/foo/.././../\");\r\ncheckThrows(\"/./.././/\");"
}
